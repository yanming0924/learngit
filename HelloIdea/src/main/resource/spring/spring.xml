<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd" >


    <!--解析配置文件-->
    <context:property-placeholder location="classpath:spring/jdbc.properties" />

    <!-- 扫描com.zr.spring包和该包下的所有子包 -->
    <context:component-scan base-package="com.ming" />


    <!--
        启用AspectJ
     -->
    <aop:aspectj-autoproxy />


    <!--
    	the transactional advice (what 'happens'; see the <aop:advisor/> bean below)
    	事务传播特性
    -->
 <!--   <tx:advice id="txAdvice" transaction-manager="txManager">
        &lt;!&ndash; the transactional semantics... &ndash;&gt;
        <tx:attributes>
            &lt;!&ndash;
            	all methods starting with 'get' are read-only
            	所有以get开始的方法都是只读，也就是说以get开始的方法不参与事务
            &ndash;&gt;
            <tx:method name="get*" read-only="true"/>
            &lt;!&ndash;
            	other methods use the default transaction settings (see below)
            	其他方法默认设置
            &ndash;&gt;
            <tx:method name="*" rollback-for="java.lang.Throwable"/>
        </tx:attributes>
    </tx:advice>

    &lt;!&ndash; ensure that the above transactional advice runs for any execution
        of an operation defined by the FooService interface

    &ndash;&gt;
    <aop:config>
        <aop:pointcut id="transactionpointcut" expression="execution(* com.ming.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionpointcut"/>
    </aop:config>-->

    <!--
    	don't forget the DataSource
    	driver=com.mysql.jdbc.Driver
		url=jdbc:mysql://127.0.0.1:3306/demo
		username=pt15
		pwd=123456
    -->
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="jdbcUrl" value="${db.url}" />
        <property name="user" value="${db.username}" />
        <property name="password" value="${db.password}" />
        <property name="driverClass" value="${db.driver}" />
    </bean>

    <!-- 创建SqlSessionFactory，同时指定数据源
         spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations">
            <list>
                <value>classpath*:com/ming/mapper/*.xml</value>
            </list>
        </property>
    </bean>

    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.ming.dao"
          p:sqlSessionFactoryBeanName="sqlSessionFactory" />

    <!-- ===================================事务的配置================================== -->

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource" />

    <!-- 基于注释的事务，当注释中发现@Transactional时，使用id为“transactionManager”的事务管理器  -->
    <!-- 如果没有设置transaction-manager的值，则spring以缺省默认的事务管理器来处理事务，默认事务管理器为第一个加载的事务管理器 -->
    <!-- 优先级：如果配置冲突，注解的比xml的高 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置事务特性 ，配置add、delete和update开始的方法，事务传播特性为required -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="edit*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="login*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="regist*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="getAll*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 配置哪些类的方法进行事务管理 -->
    <aop:config>
        <aop:pointcut id="allManagerMethod" expression="execution (* com.ming.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
    </aop:config>

</beans>